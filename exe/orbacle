#!/usr/bin/env ruby

require 'optparse'
require 'orbacle'
require 'sqlite3'

Dir.chdir(__dir__)

options = {}

OptionParser.new do |opts|
  opts.banner = 'Usage: ./orbacle [options]'

  opts.on('-d DIR', '--dir', 'Directory in which project resides') do |dir|
    options[:dir] = dir
  end
end.parse!

def index(options)
  dir = options.fetch(:dir)
  Dir.chdir(dir)

  files  = Dir.glob('**/*.rb')
  output = {}

  parser = Orbacle::ParseFileMethods.new

  files.each do |input_file|
    begin
      # puts "Processing #{input_file}"
      output[input_file] = parser.process_file(File.read(input_file))
    rescue Parser::SyntaxError
      puts "Warning: Skipped #{input_file} because of syntax error"
    end
  end

  File.delete(".orbacle.db") if File.exists?(".orbacle.db")
  db = SQLite3::Database.new(".orbacle.db")
  tables = db.execute <<-SQL
    create table constants (
      scope varchar(255),
      name varchar(255),
      type varchar(255),
      file varchar(255),
      line int
    );
SQL
  
  output.each do |file, result|
    result[:constants].each do |c|
      scope, name, type, opts = c

      db.execute("insert into constants values (?, ?, ?, ?, ?)", [
        scope,
        name,
        type.to_s,
        file,
        opts.fetch(:line)
      ])
    end
  end
end

class IoServer
  def logger(text)
    File.open("/home/swistak35/jimson.log", "a") {|f| f.puts(text) }
  end

  def start
    loop do
      headers = {}
      loop do
        line = $stdin.gets
        return if line.nil?
        break if line.chomp.empty?
        logger "Received header line: #{line.inspect}"
        _, hname, hval = line.chomp.match(/(.+):\s*(.*)/).to_a
        headers[hname] = hval
      end
      body = $stdin.gets(headers["Content-Length"].to_i)
      logger "Received body: #{body.inspect}"
      json = JSON.parse(body)
      call_method(json)
    end
  end

  def call_method(json)
    method_name = json["method"]
    params = json["params"]
    case method_name
    when "textDocument/definition"
      call_definition(params)
    else logger("Called unhandled method '#{method_name}' with params '#{params}'")
    end
  end

  def call_definition(params)
    logger("Definition called with params #{params}!")
  end
end

def server(options)
  server = IoServer.new
  server.start
end

case ARGV[0]
when 'index' then index(options)
when 'server' then server(options)
end
